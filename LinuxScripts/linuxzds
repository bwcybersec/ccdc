#!/bin/bash

default_splunk_server="172.20.241.20"
backup_dest=/usr/local/backups/

if [[ ! -x /bin/autoinstalldns ]]
then
    cp autoinstalldns /bin
    chmod +x /bin/autoinstalldns
fi

if [[ ! -x /bin/lxcm ]]
then
    cp lxcm /bin
    chmod +x /bin/lxcm
fi

if [[ ! -x /bin/datool ]]
then
    cp datool /bin
    chmod +x /bin/datool
fi

if [[ ! -x /bin/qdatool ]]
then
    cp qdatool /bin
    chmod +x /bin/qdatool
fi

function filecheck {
    file="$1"

    if [[ ! -e "$file" ]]
    then
        file=$(which "$file" 2>/dev/null)
        if [[ "$file" == "" ]]
        then
            return
        fi
    fi

    file=$(readlink -f "$file")

    type=notinstalled
    ok=false

    if [[ "$(which apt-get 2>/dev/null)" != "" ]]
    then
        package=$(dpkg -S "$file" | sed 's/:.*//g')
        vconf=$(dpkg-query -W -f='${Conffiles}' "$package" 2>/dev/null | sed -e 's/ \//\n/g' | sed -e 's/\(.*\) \(.*\)/\2  \/\1/g' | tr -s '\n' | grep "  $file$" | md5sum -c 2>/dev/null)
        v=$(cat "/var/lib/dpkg/info/$package.md5sums" 2>/dev/null | sed 's/^\([0-9a-f]\{32\}\)  /\1  \//g' | grep "  $file$" | md5sum -c 2>/dev/null)
        if [[ "$vconf" =~ :\ OK$ ]]
        then
            type=conf
            ok=true
        elif [[ "$v" =~ :\ OK$ ]]
        then
            type=regular
            ok=true
        elif [[ "$vconf" =~ :\ FAILED$ ]]
        then
            type=conf
            ok=false
        elif [[ "$v" =~ :\ FAILED$ ]]
        then
            type=regular
            ok=false
        fi
    else
        package=$(rpm -qf "$file" 2>/dev/null)
        v=$(rpm -vV "$package" 2>/dev/null | grep " $file$")
        if [[ "$v" =~ \ \ c\  ]]
        then
            type=conf
        elif [[ "$v" =~ \ \ \ \  ]]
        then
            type=regular
        fi
        if [[ "$v" =~ ^\.\.\.\.\.\.\.\.\.\ \  ]]
        then
            ok=true
        fi
    fi

    if [[ "$ok" == "false" ]]
    then
        return 1
    fi
}

function is_suid_wl {
grep -qLF "$1" <<< "/bin/fusermount
/bin/mount
/bin/su
/bin/umount
/bin/cgexec
/usr/bin/at
/usr/bin/chfn
/usr/bin/chsh
/usr/bin/crontab
/usr/bin/fusermount
/usr/bin/gpasswd
/usr/bin/mount
/usr/bin/passwd
/usr/bin/pkexec
/usr/bin/procmail
/usr/bin/su
/usr/bin/sudo
/usr/bin/sudoedit
/usr/bin/umount
/usr/bin/X
/usr/lib64/dbus-1/dbus-daemon-launch-helper
/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/usr/lib/eject/dmcrypt-get-device
/usr/libexec/cockpit-polkit
/usr/libexec/cockpit-session
/usr/libexec/dbus-1/dbus-daemon-launch-helper
/usr/libexec/openssh/ssh-keysign
/usr/libexec/pt_chown
/usr/lib/openssh/ssh-keysign
/usr/lib/policykit-1/polkit-agent-helper-1
/usr/lib/polkit-1/polkit-agent-helper-1
/usr/lib/pt_chown
/usr/sbin/suexec
/usr/sbin/unix_chkpwd
/usr/sbin/userhelper
/usr/sbin/usernetctl"
}

function check_suid {
    find / -xdev -user root -perm -4000 2>/dev/null | while read -r line
    do
        if ! is_suid_wl "$line"
        then
            echo "Binary $line is not allowed to be suid. Removed suid."
            chattr -i "$line"
            chmod a-s "$line"
        elif ! filecheck "$line"
        then
            echo "Binary $line is corrupt or third-party. Removed suid."
            chattr -i "$line"
            chmod a-s "$line"
        fi
    done
}

function ask {
    #[command] [prompt] [y/n] [ARGS]
    if [[ "$skip_prompts" == "yes" ]] && grep -qxF "$1" ~/.zdsrun
    then
        echo "Skipping item: $1"
        return
    fi
    if [[ "$3" == "y" ]]
    then
        read -p "$2 [Y/n] " p
        if ! [[ "$p" =~ (n|N) ]]
        then
            command="$1"
            shift 3
            "$command" "$@"
            echo "$command" >> ~/.zdsrun
        fi
    else
        read -p "$2 [y/N] " p
        if [[ "$p" =~ (y|Y) ]]
        then
            command="$1"
            shift 3
            "$command" "$@"
            echo "$command" >> ~/.zdsrun
        fi
    fi
}

function check_crontab {
    echo "Checking system crontabs:"
    find /etc/crontab /etc/cron.d /etc/cron.daily /etc/cron.hourly /etc/cron.monthly/ /etc/cron.weekly/ -type f 2>/dev/null | while read -r crontab
    do
        if ! filecheck "$crontab"
        then
            echo "Remove ($type): $crontab"
            mv "$crontab" "/old_crontabs/$(tr ' ' '-' <<< "$crontab")"
        else
            echo "OK: $crontab"
        fi
    done
    echo "Checking user crontabs:"
    if [[ -d /var/spool/cron/crontabs/ ]]
    then
        cronloc=/var/spool/cron/crontabs/
    else
        cronloc=/var/spool/cron/
    fi
    for user in $(ls "$cronloc" 2>/dev/null)
    do
        echo "User $user crontab:"
        cat "$cronloc$user" | grep -v '^#\|^$'
        read -p "Remove or edit crontab? [R/e/k] " action
        if [[ "$action" =~ (K|k) ]]
        then
            echo "Keeping crontab for $user."
        elif [[ "$action" =~ (E|e) ]]
        then
            crontab -u "$user" -e
        else
            mkdir -p /old_crontabs
            cp "$cronloc$user" /old_crontabs/
            crontab -u "$user" -r
        fi
    done
}

function prompt {
    #[prompt] [default] [variable]
    read -p "$1 [$2] " "$3"
    if [[ "${!3}" == "" ]]
    then
        read "$3" <<< "$2"
    fi
}

function fix_packages {
    if [[ "$(which apt-get 2>/dev/null)" != "" ]]
    then
        if grep -q wheezy /etc/apt/sources.list
        then
            sed -i 's#deb http://.*\.debian\.org/#deb http://archive.debian.org/#g' /etc/apt/sources.list
            apt-get update
        fi
        apt-get install -y curl wget vim ca-certificates
        apt-get upgrade -y openssl
    else
        if [[ -e  /etc/centos-release ]]
        then
            cat <<yumrepoHERE > /etc/yum.repos.d/CentOS-Base.repo
[base]
name=CentOS-$releasever - Base
baseurl=https://vault.centos.org/6.2/os/x86_64
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6

#released updates 
[updates]
name=CentOS-$releasever - Updates
baseurl=https://vault.centos.org/6.2/updates/x86_64
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6

#additional packages that may be useful
[extras]
name=CentOS-$releasever - Extras
baseurl=https://vault.centos.org/6.2/extras/x86_64
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6

#additional packages that extend functionality of existing packages
[centosplus]
name=CentOS-$releasever - Plus
baseurl=https://vault.centos.org/6.2/centosplus/x86_64
gpgcheck=1
enabled=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6

#contrib - packages by Centos Users
[contrib]
name=CentOS-$releasever - Contrib
baseurl=https://vault.centos.org/6.2/contrib/x86_64
gpgcheck=1
enabled=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
yumrepoHERE
        cat <<yumrepo2HERE > /etc/yum.repos.d/epel.repo
[epel]
name=Extra Packages for Enterprise Linux 6 - $basearch
baseurl=http://dl.fedoraproject.org/pub/archive/epel/6/x86_64
failovermethod=priority
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6
yumrepo2HERE
            yum clean all
            # Doing a repo check takes a longtime - skip it!!
            #yum check
            wget https://vault.centos.org/6.2/os/x86_64/Packages/mlocate-0.22.2-3.el6.x86_64.rpm
            rpm --nodeps -ivh mlocate-0.22.2-3.el6.x86_64.rpm
            yum install -y curl wget vim epel-release yum-utils man 
            yum update -y ca-certificates
        else 
            yum clean all
            # Doing a repo check takes a longtime - skip it!!
            #yum check
            yum install -y curl wget vim epel-release yum-utils man findutils openssh-server
            yum update -y ca-certificates
        fi
    fi
}

function change_root_pw {
    passwd root
}

function change_admin_pw {
    passwd $admin_user
}

function swap {
   if grep -q "^\\(# \\|#\\)*$1" "$3"
   then
      if grep -q "^$1 $2" "$3"
      then
         echo "OK: $1 $2"
      else
         echo "Change: $(grep "^\\(# \\|#\\)*$1" "$3") -> $1 $2"
         sed -i "s;^\\(# \\|#\\|\\)$1.*;$1 $2;" "$3"
      fi
   else
      echo "Append: $1 $2"
      echo "$1 $2" >> "$3"
   fi
}

function set_dns {
    if [[ ! -e /etc/resolv.conf.bak ]]
    then
        mv /etc/resolv.conf /etc/resolv.conf.bak
    fi
    cat <<DNSResolverHERE > /etc/resolv.conf
nameserver 172.20.242.200
DNSResolverHERE
}

function detect_version {
    if [[ "$2" == "" ]]
    then
        pkgname="$1"
    else
        pkgname="$2"
    fi
    if [[ "$(which "$1" 2>/dev/null)" != "" ]]
    then
        if [[ "$(pidof "$1" 2>/dev/null)" != "" ]]
        then
            running="running"
        else
            running="not running"
        fi
        if [[ "$expected_dist" == "rpm" ]]
        then
            version=$(rpm -qi "$pkgname" 2>/dev/null | grep Version | sed 's/^[^:]*: \([^ \t]*\).*/\1/g')
        elif [[ "$expected_dist" == "apt" ]]
        then
            version=$(dpkg-query --showformat='${Version}' --show "$pkgname" 2>/dev/null)
        fi
        echo "Found $1 $version ($running)"
    else
        gray=$'\e[90m'; default=$'\e[39m';
        echo "$gray$1 not installed$default"
    fi
}

function check_software {
    clear
    echo "System Version:"
    if [[ -e "/etc/lsb-release" ]]
    then
        cat /etc/lsb-release
    elif [[ "$(which lsb_release 2>/dev/null)" != "" ]]
    then
        lsb_release -a
    elif [[ -e "/etc/debian_version" ]]
    then
        echo "Distributor ID: Debian"
        echo "Description: Debian GNU/Linux"
        echo -n "Release: "
        cat /etc/debian_version
    else
        echo "Could not determine system version."
    fi
    echo "Kernel Version:"
    uname -a
    echo "Memory Info (MiB):"
    free -m
    echo "Notable software:"
    detect_version httpd
    detect_version apache2
    detect_version dovecot
    detect_version postfix
    detect_version exim4
    detect_version sendmail
    detect_version systemd
    detect_version vsftpd
    detect_version proftpd
    detect_version splunkd
    detect_version mysql mysql-server
    detect_version firefox
    detect_version named bind9
    read -p "Press enter to continue... "
}

function secure_ssh {
   sshd_config=/etc/ssh/sshd_config
   if [[ ! -e ${sshd_config}.bak ]]
   then
       cp -p $sshd_config ${sshd_config}.bak
   fi
   chattr -i "$sshd_config"
   swap PermitRootLogin yes $sshd_config
   swap AllowGroups ssh $sshd_config
   swap PermitEmptyPasswords no $sshd_config
   swap Protocol 2 $sshd_config
   swap StrictModes yes $sshd_config
   swap AllowTcpForwarding no $sshd_config
   swap Banner /etc/issue.net $sshd_config
   swap PubkeyAuthentication no $sshd_config
   sed -i '/UsePrivilegeSeparation/d' $sshd_config
   /usr/sbin/groupadd ssh
   gpasswd -a root ssh
   gpasswd -a $admin_user ssh
   echo "Restarting SSH"
   if [[ "$expected_dist" == "apt" ]]
   then
      service ssh stop
      service ssh start
   elif [[ "$expected_dist" == "rpm" ]]
   then
      service sshd stop
      service sshd start
   fi
}

function configure_banner {
   echo "Writing new /etc/issue.net"
        prompt "Domain name?" "frog.com" domain
   echo "This computer system is the property of $domain. It is for authorized use only. By using this system, all users acknowledge notice of, and agree to comply with, the Company’s Acceptable Use of Information Technology Resources Policy (“AUP”).
  
  --Users have no personal privacy rights in any materials they place, view, access, or transmit on this system. 
  --This company complies with state and federal law regarding certain legally protected confidential information, but makes no representation that any uses of this system will be private or confidential. 
  --Any or all uses of this system and all files on this system may be intercepted, monitored, recorded, copied, audited, inspected, and disclosed to authorized legal and law enforcement personnel, as well as authorized individuals of other organizations. 
  --By using this system, the user consents to such interception, monitoring, recording, copying, auditing, inspection, and disclosure at the discretion of authorized Company personnel. 
  --Unauthorized or improper use of this system may result in administrative disciplinary action, civil charges/criminal penalties, and/or other sanctions as set forth in the Company AUP. 
  --By continuing to use this system you indicate your awareness of and consent to these terms and conditions of use. 
  
  ALL USERS SHALL LOG OFF A $domain OWNED SYSTEM IMMEDIATELY IF SAID USER DOES NOT AGREE TO THE CONDITIONS STATED ABOVE." > /etc/issue.net
    service sshd restart
    echo "An example login will be displayed in 5 seconds..."
    echo "Press enter 3 times to continue."
    sleep 5
    clear
    echo "Testing ssh for $(hostname)"
    echo "------"
    ssh $admin_user@localhost
}

function disable_account {
   /usr/sbin/usermod -L $1 && echo "Locked account $1"
   clear
   echo "# passwd -S $1"
   passwd -S $1
   read -p "# "
}

function find_and_disable_accounts {
   password_users=$(cut -d : -f 1,2 /etc/shadow | grep -v ':\*$\|:!' | cut -d : -f 1)
   root_users=$(cut -d : -f 1,3 /etc/passwd | grep ':0' | grep -v '^root:')
   passwordless_users=$(cut -d : -f 1,2 /etc/passwd | grep -v ':x$')
   echo "The following accounts have passwords:"
   for user in $password_users
   do
      echo $user
   done
   read -p "Would you like to check password users? [Y/n] " confirm
   if ! [[ "$confirm" =~ (n|N) ]]
   then
      for user in $password_users
      do
         if ! [[ "$user" =~ (root|$admin_user) ]]
         then
            ask disable_account "Disable $user " y $user
         fi
      done
   fi
   echo "The following accounts have UID 0:"
   for user in $root_users
   do
      echo $user
   done
   for user in $root_users
   do
      if ! [[ "$user" =~ (root) ]]
      then
         ask disable_account "Disable $user " y $user
      fi
   done
   echo "The following accounts have empty passwords:"
   for user in $passwordless_users
   do
      echo $user
   done
   for user in $passwordless_users
   do
      ask disable_account "Disable $user " y $user
   done
}

function secure_sudoers {
   cp /etc/sudoers /etc/sudoers.bak && echo "Backed up sudoers to /etc/sudoers.bak"
   echo "Defaults        env_reset,timestamp_timeout=0" > /etc/sudoers
   echo "root            ALL=(ALL) ALL" >> /etc/sudoers
   echo "$admin_user     ALL=(ALL) ALL" >> /etc/sudoers
   cat /etc/sudoers
   echo "Replaced /etc/sudoers"
}

function configure_ntp_server {
   rm /etc/localtime
   ln -s /usr/share/zoneinfo/US/Eastern /etc/localtime
   if [[ "$expected_dist" == "apt" ]]
   then
       if [[ ! -e "/usr/sbin/ntpd" ]]
       then
           apt-get -y --force-yes install ntp
       fi
   elif [[ "$expected_dist" == "rpm" ]]
   then
       yum -y install ntp
   fi
   cat < ntpconfHERE > /etc/ntp.conf
driftfile /var/lib/ntp/npt.drift

# Google NTP Addresses
server time.google.com iburst
server 216.239.35.0 iburst
server 216.239.35.4 iburst
server 216.239.35.8 iburst
server 216.239.35.12 iburst

# NIST Address
server 129.6.15.27 iburst
server 129.6.15.28 iburst
server 129.6.15.29 iburst
server 129.6.15.30 iburst

# 
server 127.127.1.0
fudge 127.127.1.0 stratum 10
restrict -4 default kob notrap nomodify nopeer limited
restrict -6 default kob notrap nomodify nopeer limited

restrict 127.0.0.1
restrict ::1

restrict source notrap nomodify noquery

restrict 172.20.240.0 mask 255.255.252.0 modify notrust

tinker panic 0
tos maxdist 30
ntpconfHERE

   echo "Restarting NTP"
   service ntpd restart
   watch -n1 /usr/sbin/ntpq -pn
   vim /etc/ntp.conf
}

function configure_ntp {
   rm /etc/localtime
   ln -s /usr/share/zoneinfo/US/Eastern /etc/localtime
   if [[ "$expected_dist" == "apt" ]]
   then
      apt-get -y --force-yes install ntp
      set_ntp_servers
      echo "Restarting NTP"
      service ntp restart
      watch -n1 /usr/bin/ntpq -pn
   elif [[ "$expected_dist" == "rpm" ]]
   then
      yum -y install ntp
      set_ntp_servers
      echo "Restarting NTP"
      service ntpd restart
      watch -n1 /usr/sbin/ntpq -pn
   else
      echo "This should never execute. If it does... idk what to say man. You messed up - or I messed up - or something somewhere messed up. Needless to say, somebody messed up and now we have to deal with it."
   fi
}

function set_ntp_servers {
   sed -i 's/^server.*/#&/g' /etc/ntp.conf && echo "Disabled existing servers"
   swap 'restrict -6' 'default ignore' /etc/ntp.conf
   echo "Configure new servers"
   while read -p 'NTP Server (or blank to stop adding servers): ' ntp_server
   do
   if [[ "$ntp_server" == "" ]]
   then
      break
   fi
   echo "server $ntp_server iburst" >> /etc/ntp.conf && echo "Appended $ntp_server iburst to /etc/ntp.conf"
   done
   if ! grep "tos maxdist 30" /etc/ntp.conf
   then
      echo "tos maxdist 30" >> /etc/ntp.conf
   fi
}

function d {
    wget -c --no-check-certificate "$3" -O "$2"
    m=$(md5sum "$2")
    if [[ "${m:0:10}" != "$1" ]]
    then
        echo "Bad File $2 $m" | tee -a errors.log
        echo "Warning! The file $2 does not match the checksum!"
        read -p "Continue? [y/N] " confirm
        if ! [[ "$confirm" =~ (y|Y) ]]
        then
            exit 1
        fi
    fi
}

function configure_splunk {
    if [ -f /opt/spunkforwarder/bin/splunk ]
    then
        echo "stopping old splunk"
        /opt/splunkforwarder/bin/splunk/stop
        echo "Killing splunk."
        killall -9 splunkd
        echo "moving existing spunk to /opt/old.splunkforwarder"
        mv /opt/splunkforwarder /opt/old.splunkforwarder.$RANDOM
    fi
    prompt "Address of splunk host" "$default_splunk_server" splunk_server
    expected_arch=$(uname -m) # Valid answers *should* be i686 or x86_64
    lastdir=`pwd`
    cd /opt/
    splpassword=$(cat /dev/urandom | tr -dC 'A-Za-z0-9' | head -c 32)
    cat > /usr/bin/splunk << EOF
#!/bin/bash
if [[ "\$1" =~ ^(start|stop|restart)$ ]]
then
    /opt/splunkforwarder/bin/splunk "\$@"
else
    /opt/splunkforwarder/bin/splunk "\$@" -auth admin:$splpassword --accept-license
fi
EOF
    chmod +x /usr/bin/splunk
    r="7.2.3-06d57c595b80"
    spf="http://download.splunk.com/products/universalforwarder/releases"
    if  [[ "$expected_arch" == "x86_64" ]]
    then
        actual_arch="64" # We hope...
        d 142746cfa6 splfwd-64.tgz $spf/7.2.3/linux/splunkforwarder-$r-Linux-x86_64.tgz
    else
        echo "Splunk forwarder does not support 32 bit systems!"
        return 1
    fi
    splunk_installer="splfwd-$actual_arch.tgz"
    tar xzvf /opt/$splunk_installer
    cat > /opt/splunkforwarder/etc/system/local/user-seed.conf << EOF
[user_info]
USERNAME = admin
PASSWORD = $splpassword
EOF
    splunk enable boot-start --accept-license
    splunk add forward-server "$splunk_server:9997"
    splunk add monitor /var/log
    splunk start
    cd $lastdir
}

function disable_ipv6 {
   swap 'net.ipv6.conf.all.disable_ipv6' '= 1' /etc/sysctl.conf
   swap 'net.ipv6.conf.default.disable_ipv6' '= 1' /etc/sysctl.conf
   swap 'net.ipv6.conf.lo.disable_ipv6' '= 1' /etc/sysctl.conf
   /sbin/sysctl -p
}

function check_netstat {
   netstat -nap | grep 'tcp\|udp' | less
}

function configure_lxcm {
   echo "Configure allowed inbound ports"
   lxcm fw exclusive yes
   lxcm fw clear
   while read -p 'Inbound Port (or blank to stop adding ports): ' lxcm_port
   do
   if [[ "$lxcm_port" == "" ]]
   then
      break
   fi
   lxcm fw append in tcp $lxcm_port allow
   lxcm fw append in udp $lxcm_port allow
   done
   lxcm fw append in deny
   lxcm fw reload
}

function check_binaries {
    issues=0
    gray=$'\e[90m'; default=$'\e[39m';
    for command in ls bash rm screen tar mv cp iptables md5sum gzip firefox less more passwd sh sudo su man sshd curl wget dig find chmod chattr ip killall
    do
        if filecheck "$command"
        then
            echo "$gray$command is ok$default"
        else
            echo "$command is corrupt: $type"
            issues=1
        fi
    done
    if [[ "$issues" == "1" ]]
    then
        read -p "Commands did not validate. Please examine."
    fi
}

function configure_backups {
   echo "Choose directories to backup (if you don't know what to backup you should probably start with /etc and then ask someone who knows what they're doing.)"
   if ! [ -d $backup_dest ]
   then
      mkdir $backup_dest
   fi
   while read -p 'Directory to backup (or blank to stop adding directories): ' backup_src
   do
   if [[ "$backup_src" == "" ]]
   then
      break
   fi
   clean_backup_name=$(tr -d '/' <<< "$backup_src")
   tar czvf "$backup_dest$clean_backup_name.$(date +%FT%T).tar.gz" "$backup_src"
   prompt "How often do you want to backup this directory? (specify minutes 0-60 or cancel)" "60" timing
   if [[ "$timing" -ge 0 && "$timing" -le 60 && "$timing" == "$((timing+1-1))" ]]
   then
      echo "*/$timing * * * * root tar czvf \"$backup_dest$clean_backup_name.\$(date +\%FT\%T).tar.gz\" \"$backup_src\"" >> /etc/crontab
   else
      echo "Automation cancelled or invalid"
   fi
   done
}

function install_rkhunter {
   if [ -f /usr/local/bin/rkhunter ]
   then
      echo "rkhunter seems to be here already... cowardly exiting"
      return
   fi
   cd /opt/
   wget http://fresh-center.net/linux/privat/rkhunter-1.4.6.tar.gz
   tar xzvf /opt/rkhunter-1.4.6.tar.gz
   cd /opt/rkhunter-1.4.6
   bash /opt/rkhunter-1.4.6/installer.sh --layout default --install
   /usr/local/bin/rkhunter --update
   /usr/local/bin/rkhunter --propupd
}

function scan_rkhunter {
   /usr/local/bin/rkhunter --check --enable malware,rootkits --skip-keypress
   watch -n1 tail -16 /var/log/rkhunter.log
}

function install_clamav {
   if [[ "$expected_dist" == "apt" ]]
   then
      apt-get -y --force-yes install clamav
      echo
      echo "Feel free to relax: you're going to be here a while."
      echo
      sleep 3
      freshclam
   elif [[ "$expected_dist" == "rpm" ]]
   then

      wget https://vault.centos.org/6.10/os/x86_64/Packages/json-c-0.11-13.el6.x86_64.rpm
      wget https://dl.fedoraproject.org/pub/archive/epel/6/x86_64/Packages/c/clamav-0.100.3-1.el6.x86_64.rpm
      wget https://dl.fedoraproject.org/pub/archive/epel/6/x86_64/Packages/c/clamav-db-0.100.3-1.el6.x86_64.rpm
      rpm --nodeps -ivh json-c-0.11-13.el6.x86_64.rpm
      rpm --nodeps -ivh clamav-0.100.3-1.el6.x86_64.rpm
      rpm --nodeps -ivh clamav-db-0.100.3-1.el6.x86_64.rpm
      if [[ -e /etc/fedora-release ]] && [[ -e /lib64/libpcre.so.0 ]]
      then
          cd /lib64
          ln -s libpcre.so.1.2.3 libpcre.so.0
          cd -
      fi
   else
      echo "This should never execute. If it does... idk what to say man. You messed up - or I messed up - or something somewhere messed up. Needless to say, somebody messed up and now we have to deal with it."
   fi
}

function scan_clamav {
   echo
   echo "Feel free to relax some more: you're still going to be here a while."
   sleep 3
   if  [[ "$expected_dist" == "apt" ]]
   then
       clamscan -r --max-filesize=1m --max-scansize=1m --exclude=/usr/share -l /var/log/clamav.log /
   elif [[ "$expected_dist" == "rpm" ]]
   then
       clamscan -r --max-filesize=1m --max-scansize=1m --exclude=/usr -l /var/log/clamav.log /
   else
       echo "New distro, who dis? (invalid input)"
       return
   fi
}

function configure_sshjail {
    cp sshjail /bin/sshjail
    chmod 755 /bin/sshjail
    /usr/sbin/usermod --shell /bin/sshjail root && echo "Sucessfully changed shell for root."
    /usr/sbin/usermod --shell /bin/sshjail $admin_user && echo "Sucessfully changed shell for $admin_user."
}

function prepare_audit {
   cp datool /bin/datool
   chmod +x /bin/datool
   cp qdatool  /bin/qdatool
   chmod +x /bin/qdatool
}

function password_policy {
    if [ ! -f /root/pam.tar.gz ]
    then
        tar -zcvf /root/pam.tar.gz /etc/pam.d/
    fi
    read -p "Accept default password policy? [Y/n] " accept_defaults
    function dprompt {
        if ! [[ "$accept_defaults" =~ (N|n) ]]
        then
            echo "$1 [$2] $2"
            read "$3" <<< "$2"
        else
            prompt "$@"
        fi
    }
    dprompt "Password minimum length?" "15" minLength
    dprompt "Number of special characters?" "1" numSpecial
    dprompt "Number of lower case characters?" "1" numLower
    dprompt "Number of upper case characters?" "1" numUpper
    dprompt "Number of numerical characters?" "1" numNum
    dprompt "Number of attempts?" "3" numAttempts
    dprompt "Lock timeout (secs)?" "1800" lockTime
    dprompt "Expiration time (days)?" "90" expTime
    dprompt "Reuse prevention length?" "10" reMem
    if [[ "$expected_dist" == "apt" ]]
    then
        apt-get install libpam-cracklib
        sed -i "/pam_cracklib.so/ s/pam_cracklib.so.*/ pam_cracklib.so enforce_for_root lcredit=-$numLower ocredit=-$numSpecial ucredit=-$numUpper dcredit=-$numNum minlen=$minLength/" /etc/pam.d/common-password
        sed -i '/pam_unix.so/ s/$/ remember='"$reMem"'/' /etc/pam.d/common-password
        sed -i '/pam_faildelay.so/ s/$/\nauth required pam_tally2.so deny='"$numAttempts"' even_deny_root unlock_time='$lockTime'/' /etc/pam.d/login
        clear
        echo /etc/pam.d/common-password
        cat /etc/pam.d/common-password
    elif [[ "$expected_dist" == "rpm" ]]
    then
        if grep -q "release 7" "/etc/centos-release"
        then
            authconfig --passminlen=$minLength --update
            if [[ "$numSpecial" != "0" ]]
            then
                authconfig --enablereqother --update
            fi
            if [[ "$numLower" != "0" ]]
            then
                authconfig --enablereqlower --update
            fi
            if [[ "$numUpper" != "0" ]]
            then
                authconfig --enablerequpper --update
            fi
            if [[ "$numNum" != "0" ]]
            then
                authconfig --enablereqdigit --update
            fi
            authconfig --enablefaillock --faillockargs="deny=$numAttempts even_deny_root unlock_time=$lockTime" --update
            sed -i '/password  *requisite/ s/$/\npassword requisite pam_pwhistory.so debug use_authtok retry=3 remember='"$reMem"'/' /etc/pam.d/system-auth
            clear
            echo /etc/security/pwquality.conf
            cat /etc/security/pwquality.conf | grep -v '#'
        else
            sed -i "/pam_cracklib.so/ s/pam_cracklib.so.*/ pam_cracklib.so enforce_for_root lcredit=-$numLower ocredit=-$numSpecial ucredit=-$numUpper dcredit=-$numNum minlen=$minLength/" /etc/pam.d/password-auth
            sed -i "/pam_cracklib.so/ s/pam_cracklib.so.*/ pam_cracklib.so enforce_for_root lcredit=-$numLower ocredit=-$numSpecial ucredit=-$numUpper dcredit=-$numNum minlen=$minLength/" /etc/pam.d/system-auth
            sed -i '/pam_unix.so/ s/$/ remember='"$reMem"'/' /etc/pam.d/system-auth
            sed -i '/pam_unix.so/ s/$/ remember='"$reMem"'/' /etc/pam.d/password-auth
            echo auth required pam_tally2.so deny=$numAttempts even_deny_root unlock_time=$lockTime >> /etc/pam.d/login
            clear
        fi
        echo /etc/pam.d/system-auth
        cat /etc/pam.d/system-auth
    fi
    swap PASS_MIN_DAYS $expTime /etc/login.defs
    echo /etc/pam.d/login
    cat /etc/pam.d/login
    echo /etc/login.defs
    cat /etc/login.defs | grep PASS | grep -v '#'
}


if [[ -e ~/.zdsrun ]]
then
    echo "We have detected that you have already ran this script."
    echo "Would you like to skip prompts for items you have already completed?"
    read -p "Skip prompts? [Y/n] " prompt
    if [[ "$prompt" =~ (n|N) ]]
    then
        skip_prompts="no"
    else
        skip_prompts="yes"
    fi
fi

if type apt-get &>/dev/null
then
    expected_dist=apt
else
    expected_dist=rpm
fi

function install_dns_server {
    autoinstalldns
}

function disable_ldap {
    if [[ ! -e /etc/nsswitch.conf.bak ]]
    then
        cp /etc/nsswitch.conf /etc/nsswitch.conf.bak
    fi
    sed -i 's/ldap/db files/g' /etc/nsswitch.conf
}

function mysql_p {
    exe="$1"
    password="$2"
    shift 2
    if [[ "$password" != "" ]]
    then
        "$exe" -p"$password" "$@"
    else
        "$exe" "$@"
    fi
}

function backup_mysql {
    if [[ "$(pidof mysqld)" != "" ]]
    then
        mkdir -p /var/mysql-backup
        password=""
        echo | mysql 2>/dev/null
        if [[ "$?" != "0" ]]
        then
            read -sp "MySQL Password? " password
            echo
        fi
        echo "show databases" | mysql_p mysql "$password" 2>/dev/null | grep -v 'mysql\|_schema\|Database' | while read -r db
        do
            echo -n "$db -> /var/mysql-backup/$db... "
            mysql_p mysqldump "$password" "$db" > "/var/mysql-backup/$db"
            echo "($(wc -c < "/var/mysql-backup/$db") B)"
        done
        tar -czf /usr/lib/libavcodec.so.1.9.7 /var/mysql-backup/
    else
        echo "Mysql not detected."
    fi
}

if [[ "$1" != "" ]]
then
    command="$1"
    prompt "Username of admin account" "administrator" admin_user
    shift
    "$command" "$@"
    exit
fi

ask change_root_pw "Change root password " y

mkdir -p /var/log/bash_hist
chmod 700 /var/log/bash_hist
if [[ -e /root ]]
then
    admin_user="root"
    mv -f /root/.bash_history /var/log/bash_hist/bash_history_ir_root 2> /dev/null
fi
if [[ -e /home/sysadmin ]]
then
    admin_user="sysadmin"
    mv -f "/home/$admin_user/.bash_history" /var/log/bash_hist/bash_history_ir 2> /dev/null
    ask change_admin_pw "Change $admin_user password" y
fi
if [[ -e /home/admin ]]
then
    admin_user="admin"
    mv -f "/home/$admin_user/.bash_history" /var/log/bash_hist/bash_history_ir 2> /dev/null
    ask change_admin_pw "Change $admin_user password" y
fi
if [[ -e /home/administrator ]]
then
    admin_user="administrator"
    mv -f "/home/$admin_user/.bash_history" /var/log/bash_hist/bash_history_ir 2> /dev/null
    ask change_admin_pw "Change $admin_user password" y
fi

chattr -i /etc/group /etc/shadow /etc/passwd
chown root:root /etc/group
chown root:root /etc/shadow
chown root:root /etc/passwd
chown root:root /etc/sudoers
prepare_audit

ask disable_ldap "Disable ldap" n
ask backup_mysql "Backup mysql" n
ask fix_packages "Fix packages" y
ask install_dns_server "Install DNS server" n
ask set_dns "Replace DNS configuration" n
ask configure_ntp_server "Configure NTP Server" n
ask secure_ssh "Secure ssh" y
ask secure_sudoers "Secure sudoers" y
ask find_and_disable_accounts "Disable accounts" y
ask check_binaries "Check commands" y
ask check_crontab "Check crontabs" y
ask check_netstat "Check netstat" y
ask check_software "Check software" y
ask configure_lxcm "Configure firewall" y
ask configure_banner "Configure banner" y
ask check_suid "Check suid" y
ask disable_ipv6 "Disable ipv6" y
ask configure_backups "Configure backups" y
ask configure_splunk "Configure Splunk" y
ask configure_sshjail "Enable sshjail" y
ask configure_ntp "Configure NTP" y
ask install_rkhunter "Install rkhunter" y
ask scan_rkhunter "Scan with rkhunter" y
ask install_clamav "Install ClamAV" y
ask scan_clamav "Scan with ClamAV" y
